/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DataStructures;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.PriorityQueue;

/**
 *
 * @author 21771-21794
 */
public class PrintTreeCode {

    public static PriorityQueue<Nodes> tree = new PriorityQueue<Nodes>(128, new MyComparator());

    public static File treeCode(File HuffmanFile) throws FileNotFoundException, IOException, ClassNotFoundException {

        try {
            ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(HuffmanFile));

            Object obj = null;
            Nodes node = new Nodes();
            obj = node;
//            printCode((Nodes)obj,"");
////            if (node.getChild1()
////                    == null
////                    && node.getChild2()
////                    == null
////                    && Character.isLetter(node.getCharacter())) {
////
////                // c is the character in the node 
////                System.out.println(node.getCharacter() + ":" + node.getFrequency());
////            }
//                inputStream.close();
            }catch (Exception e) {
            e.printStackTrace();
        }

            File file = new File("code.dat");

            return file;
        }
//     public static void printCode(Nodes node, String s) {
//
//		// base case; if the left and right are null 
//        // then its a leaf node and we print 
//        // the code s generated by traversing the tree. 
//        if (node.getChild1()
//                == null
//                && node.getChild2()
//                == null
//                && Character.isLetter(node.getCharacter())) {
//
//            // c is the character in the node 
//            System.out.println(node.getCharacter() + ":" + s);
//
//            return;
//        }

		// if we go to left then add "0" to the code. 
        // if we go to the right add"1" to the code. 
		// recursive calls for left and 
        // right sub-tree of the generated tree. 
//        printCode(node.getChild1(), s + "0");
//        printCode(node.getChild2(), s + "1");
//    }
    }
